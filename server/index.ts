import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { env } from "bun";
import Anthropic from '@anthropic-ai/sdk';
import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import * as crypto from 'node:crypto';

// Types
interface AnalyzeRequest {
  pgn: string;
}

interface AnalyzeResponse {
  ok: boolean;
  summary: string;
  cached?: boolean; // Zeigt an, ob die Antwort aus dem Cache kam
}

interface CheckCacheRequest {
  pgn: string;
}

interface CheckCacheResponse {
  inCache: boolean;
  // Wenn im Cache, senden wir die Analyse direkt zur√ºck
  analysis?: AnalyzeResponse;
}

// Cache f√ºr PGN-Analysen
interface CacheEntry {
  timestamp: number;
  response: AnalyzeResponse;
}

// Konfiguration f√ºr den Filesystem-Cache
const CACHE_DIR = path.join(process.cwd(), 'cache');
const CACHE_EXPIRY = 30 * 24 * 60 * 60 * 1000; // 30 Tage in Millisekunden

// Initialisiere den Cache-Ordner
async function initializeCache() {
  try {
    await fs.mkdir(CACHE_DIR, { recursive: true });
    console.log(`Cache directory initialized at ${CACHE_DIR}`);
  } catch (error) {
    console.error('Failed to initialize cache directory:', error);
  }
}

// Generiere einen Hash f√ºr das PGN als Dateinamen
function getCacheFilename(pgn: string): string {
  const hash = crypto.createHash('md5').update(pgn).digest('hex');
  return `${hash}.json`;
}

// Lade einen Cache-Eintrag
async function loadFromCache(pgn: string): Promise<CacheEntry | null> {
  const cacheFile = path.join(CACHE_DIR, getCacheFilename(pgn));
  console.log(`Versuche Cache zu laden von: ${cacheFile}`);
  
  try {
    const data = await fs.readFile(cacheFile, 'utf-8');
    console.log('Cache-Eintrag gefunden!');
    return JSON.parse(data) as CacheEntry;
  } catch (error) {
    // Datei existiert nicht oder kann nicht gelesen werden
    console.log('Kein Cache-Eintrag gefunden:', error instanceof Error ? error.message : String(error));
    return null;
  }
}

// Speichere einen Eintrag im Cache
async function saveToCache(pgn: string, entry: CacheEntry): Promise<void> {
  try {
    const cacheFile = path.join(CACHE_DIR, getCacheFilename(pgn));
    await fs.writeFile(cacheFile, JSON.stringify(entry, null, 2), 'utf8');
  } catch (error) {
    console.error('Failed to save to cache:', error);
    // Wir lassen den Fehler hier nicht weiter propagieren, um den Hauptablauf nicht zu st√∂ren
  }
}

// Bereinigt und repariert die Antwort von Claude
function sanitizeClaudeResponse(response: string): string {
  console.log('==== SANITIZE CLAUDE RESPONSE START ====');
  console.log('Original response length:', response.length);
  console.log('First 100 chars:', response.substring(0, 100));
  
  // 1. Pr√ºfe, ob die Antwort in einen Markdown-Codeblock eingebettet ist
  const jsonBlockRegex = /```(?:json)?([\s\S]*?)```/g;
  const match = jsonBlockRegex.exec(response);
  
  // Fall 1: JSON in Markdown-Codeblock - wir √ºberpr√ºfen das JSON im Block
  if (match && match[1]) {
    console.log('‚úÖ Found JSON in markdown codeblock!');
    const jsonContent = match[1].trim();
    console.log('JSON content length in block:', jsonContent.length);
    
    // Versuche das JSON zu parsen
    try {
      JSON.parse(jsonContent);
      console.log('‚úÖ JSON in codeblock is valid!');
      console.log('==== SANITIZE CLAUDE RESPONSE END (VALID BLOCK) ====');
      // Original response zur√ºckgeben, da das JSON bereits g√ºltig ist
      return response;
    } catch (error) {
      // JSON in Block ist ung√ºltig, versuchen wir es zu reparieren
      console.warn('‚ùå Invalid JSON in codeblock, attempting to fix...', error);
      console.log('Error message:', (error as Error).message);
      
      // JSON reparieren
      const fixedJson = fixJsonContent(jsonContent);
      
      // Wenn erfolgreich repariert, ersetzen wir nur den JSON-Teil im Codeblock
      try {
        JSON.parse(fixedJson);
        console.log('‚úÖ Successfully fixed JSON in codeblock!');
        // Ersetze nur den JSON-Teil im Codeblock
        const fixedResponse = response.replace(jsonBlockRegex, 
          (_, blockContent) => '```json\n' + fixedJson + '\n```');
        console.log('==== SANITIZE CLAUDE RESPONSE END (FIXED BLOCK) ====');
        return fixedResponse;
      } catch (jsonError) {
        console.error('‚ùå Could not fix JSON in codeblock:', (jsonError as Error).message);
        console.log('==== SANITIZE CLAUDE RESPONSE END (FAILED BLOCK) ====');
        return response; // Original zur√ºckgeben, wenn wir es nicht reparieren k√∂nnen
      }
    }
  } 
  
  // Fall 2: Kein Markdown-Block - pr√ºfen, ob es direktes JSON ist
  console.log('No markdown code block found, checking if direct JSON');
  try {
    // Versuche zu parsen (nur als Test)
    JSON.parse(response);
    console.log('‚úÖ Direct JSON is valid!');
    console.log('==== SANITIZE CLAUDE RESPONSE END (VALID DIRECT) ====');
    // F√ºr konsistente Verarbeitung im Client: Wir verpacken es in einen Markdown-Block
    return '```json\n' + response + '\n```';
  } catch (error) {
    console.warn('‚ùå Invalid direct JSON detected, attempting to fix...', error);
    
    // Versuche, das JSON zu reparieren
    const fixedJson = fixJsonContent(response);
    
    try {
      JSON.parse(fixedJson);
      console.log('‚úÖ Successfully fixed direct JSON!');
      console.log('==== SANITIZE CLAUDE RESPONSE END (FIXED DIRECT) ====');
      // Wir verpacken es in einen Markdown-Block f√ºr die Konsistenz
      return '```json\n' + fixedJson + '\n```';
    } catch (jsonError) {
      console.error('‚ùå Could not fix direct JSON:', (jsonError as Error).message);
      console.log('==== SANITIZE CLAUDE RESPONSE END (FAILED DIRECT) ====');
      // Wir geben die urspr√ºngliche Antwort zur√ºck
      return response;
    }
  }
}

// Hilfsfunktion zur Reparatur von JSON-Inhalten
function fixJsonContent(jsonContent: string): string {
  let fixedResponse = jsonContent;
  
  // a) Doppelte Kommas entfernen (z.B. {"a": 1,, "b": 2})
  const originalLength1 = fixedResponse.length;
  fixedResponse = fixedResponse.replace(/,\s*,/g, ',');
  if (originalLength1 !== fixedResponse.length) {
    console.log('üîß Fixed double commas');
  }
  
  // b) Kommas vor schlie√üenden Klammern entfernen (z.B. {"a": 1, "b": 2,})
  const originalLength2 = fixedResponse.length;
  fixedResponse = fixedResponse.replace(/,\s*}/g, '}');
  fixedResponse = fixedResponse.replace(/,\s*\]/g, ']');
  if (originalLength2 !== fixedResponse.length) {
    console.log('üîß Fixed trailing commas');
  }
  
  // c) Kommas nach den √∂ffnenden Klammern entfernen
  const originalLength3 = fixedResponse.length;
  fixedResponse = fixedResponse.replace(/{\s*,/g, '{');
  fixedResponse = fixedResponse.replace(/\[\s*,/g, '[');
  if (originalLength3 !== fixedResponse.length) {
    console.log('üîß Fixed leading commas');
  }
  
  // d) Unbalancierte Anf√ºhrungszeichen beheben (sehr vereinfacht)
  // Z√§hle die Anf√ºhrungszeichen au√üerhalb von Escape-Sequenzen
  const quoteCount = (fixedResponse.match(/(?<!\\)"/g) || []).length;
  console.log('Quote count:', quoteCount);
  if (quoteCount % 2 !== 0) {
    console.warn('‚ö†Ô∏è Unbalanced quotes detected in JSON - this is harder to fix automatically');
  }
  
  console.log('After fixes, first 100 chars:', fixedResponse.substring(0, 100));
  return fixedResponse;
}

// Load environment variables
const ANTHROPIC_API_KEY = env.ANTHROPIC_API_KEY;

// Check if API key is available
if (!ANTHROPIC_API_KEY) {
  console.error('Missing ANTHROPIC_API_KEY environment variable');
  console.error('Please create a .env file with your API key');
}

// Initialize Anthropic client - die neue Version nutzt andere API-Aufrufe
const anthropic = new Anthropic({
  apiKey: ANTHROPIC_API_KEY || '',
});
const ALLOWED_ORIGINS = [
  'http://localhost:3000',
  'http://localhost:5173',
  'http://localhost:5174',
  'https://chess-gpt.vercel.app',
  'https://chess-gpt-git-main.vercel.app'
];

const app = new Hono();

// Initialisiere den Cache-Ordner beim Serverstart
initializeCache();

// CORS middleware
app.use('*', cors({
  origin: (origin) => {
    // Allow requests with no origin (like mobile apps or curl requests)
    if (!origin) return '*';
    
    // Check if origin is allowed
    if (ALLOWED_ORIGINS.includes(origin)) {
      return origin;
    }
    
    return ALLOWED_ORIGINS[0]; // Default to first origin if not in the list
  },
  allowMethods: ['POST', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'],
  exposeHeaders: ['Content-Length'],
  maxAge: 86400,
  credentials: true,
}));

// Health check endpoint
app.get('/', (c) => {
  return c.json({ status: 'ok', message: 'Chess-GPT API is running' });
});

// Cache-Check Endpoint
app.post('/check-cache', async (c) => {
  try {
    const body = await c.req.json<CheckCacheRequest>();
    
    if (!body.pgn) {
      return c.json({ inCache: false }, 400);
    }
    
    // Normalisiere das PGN
    const normalizedPgn = body.pgn.trim();
    
    // Pr√ºfe, ob die Analyse bereits im Cache ist
    const cachedEntry = await loadFromCache(normalizedPgn);
    
    if (cachedEntry) {
      // Pr√ºfe, ob der Cache-Eintrag noch g√ºltig ist
      const now = Date.now();
      
      if (now - cachedEntry.timestamp < CACHE_EXPIRY) {
        console.log('Cache check: HIT');
        
        // Gibt zur√ºck, dass die Analyse im Cache ist, zusammen mit der Analyse selbst
        return c.json({
          inCache: true,
          analysis: {
            ...cachedEntry.response,
            cached: true
          }
        });
      } else {
        console.log('Cache check: EXPIRED');
      }
    } else {
      console.log('Cache check: MISS');
    }
    
    // Analyse ist nicht im Cache oder abgelaufen
    return c.json({ inCache: false });
  } catch (error) {
    console.error('Error checking cache:', error);
    return c.json({ inCache: false, error: 'Invalid request' }, 400);
  }
});

// Analyze endpoint
app.post('/analyze', async (c) => {
  try {
    const body = await c.req.json<AnalyzeRequest>();
    
    if (!body.pgn) {
      return c.json({ ok: false, error: 'Missing PGN data' }, 400);
    }
    
    // Normalisiere das PGN (entferne Whitespace), um bessere Cache-Treffer zu erzielen
    const normalizedPgn = body.pgn.trim();
    
    // Erstelle einen Hash-Schl√ºssel f√ºr das PGN
    const cacheKey = normalizedPgn;
    
    // Pr√ºfe, ob die Analyse bereits im Cache ist
    const cachedEntry = await loadFromCache(normalizedPgn);
    
    if (cachedEntry) {
      // Pr√ºfe, ob der Cache-Eintrag noch g√ºltig ist
      const now = Date.now();
      
      if (now - cachedEntry.timestamp < CACHE_EXPIRY) {
        console.log('Cache hit for PGN analysis');
        
        // Gib die gecachte Antwort zur√ºck, mit einem Flag, dass es aus dem Cache kommt
        return c.json({
          ...cachedEntry.response,
          cached: true
        });
      } else {
        // Cache-Eintrag ist abgelaufen
        console.log('Cache expired for PGN analysis');
        // Keine Notwendigkeit zu l√∂schen, wird √ºberschrieben
      }
    }
    
    // Cache-Miss: Nutze die Anthropic API f√ºr die Schachanalyse
    try {
      console.log('Cache miss, calling Anthropic API');
      
      const prompt = `Du bist ein Schachexperte. Bitte analysiere die folgende Partie und gib die Antwort im **JSON-Format** zur√ºck.
      Gib die Antwort ausschlie√ülich als valide JSON-Struktur zur√ºck. Keine Kommentare, keine Einleitung, keine Erkl√§rungen au√üerhalb des JSON! 
      Benutze ausschlie√ülich g√ºltige JSON-Syntax, insbesondere keine abschlie√üenden Klammern oder Kommata an falscher Stelle. 
      Benutze ausschlie√ülich doppelte Anf√ºhrungszeichen (") und keine typografischen Zeichen.
      
      Beispiel:
      {
        "summary": "string",
        "moments": [
          {
            "ply": 0,
            "move": "string",
            "color": "white|black",
            "comment": "string",
            "recommendation": "string",
            "reasoning": "string"
          }
        ]
      }
      

1. "summary": Eine Gesamteinsch√§tzung , in der du erkl√§rst:
   - Wer wann die Initiative hatte
   - Was strategisch interessant war
   - Wo der entscheidende Wendepunkt der Partie lag
   - Was der Spieler aus der Partie lernen kann
   	‚Ä¢	Verwende bildhafte und anschauliche Sprache, um die Dynamik und Dramatik der Partie einzufangen. Analysiere, warum bestimmte Z√ºge die Initiative verschieben, und erl√§utere kurz die wichtigsten taktischen und strategischen Motive, die dabei eine Rolle spielen.
	‚Ä¢	Gib konkrete Beispiele f√ºr Varianten oder Motive, wenn sie f√ºr das Verst√§ndnis wesentlich sind.
	‚Ä¢	Stelle im Fazit klar heraus, welche konkreten Lektionen aus der Partie f√ºr √§hnliche Situationen abgeleitet werden k√∂nnen. Formuliere einpr√§gsam und greifbar.
	‚Ä¢	Wenn m√∂glich, arbeite heraus, wie sich die psychologische Situation der Spieler w√§hrend der Partie gewandelt haben k√∂nnte.

   Innerhalb der Summary sollst du Referenzen auf Z√ºge immer eindeutig identifizieren in folgender Form, z.B. [14. Nf3], oder bei schwarz [14... Nf6]. 

2. "moments": Eine Liste der **5 bis 10 wichtigsten oder lehrreichsten Z√ºge** (kritische Momente), jeweils mit:
   - \`ply\`: Halbzugnummer (z. B. 14 = 7... f√ºr Schwarz)
   - \`move\`: Der gespielte Zug in SAN-Notation (z. B. Nf3, Qxd5, O-O)
   - \`color\`: \`"white"\` oder \`"black"\`
   - \`comment\`: Eine gut verst√§ndliche Erkl√§rung, warum der Zug problematisch oder besonders war
   - \`recommendation\`: Ein besserer Zugvorschlag (in SAN)
   - \`reasoning\`: Eine menschlich erkl√§rende Begr√ºndung, warum der Alternativzug besser ist
   - (optional) \`eval\`: Bewertung vor und nach dem Zug (z. B. \`+0.3 ‚Üí -1.2\`), falls bekannt

Bitte schreibe die Analyse so, dass sie f√ºr fortgeschrittene Anf√§nger bis unteres Klubniveau (ca. 1400) verst√§ndlich und n√ºtzlich ist. Gib **keinen Text au√üerhalb des JSON-Blocks** zur√ºck.

Hier ist die Partie im PGN-Format:

${normalizedPgn}`;

      const message = await anthropic.messages.create({
        model: "claude-sonnet-4-20250514",
        max_tokens: 10000,
        temperature: 0.5,
        system: `Du bist ein erfahrener Schachtrainer, der pr√§zise, verst√§ndliche und anschauliche Analysen schreibt. 
        Deine Sprache ist klar und nachvollziehbar, nutzt gelegentlich bildhafte Vergleiche, bleibt dabei aber sachlich und vermeidet √úbertreibungen. 
        Ziel ist es, Partieanalysen interessant und einpr√§gsam zu machen, ohne ins Dramatische oder Pathetische abzurutschen.`,
        messages: [
          { role: "user", content: prompt }
        ]
      });

      // Die aktuelle Anthropic SDK-Version gibt das Ergebnis in einer anderen Struktur zur√ºck
      let summary = '';
      if (message.content && message.content.length > 0) {
        // Extrahiere den Text aus den Content-Bl√∂cken
        for (const block of message.content) {
          if ('text' in block) {
            summary += block.text;
          }
        }
      }
      
      // Sanitize und repariere die Claude-Antwort, falls n√∂tig
      summary = sanitizeClaudeResponse(summary);

      // Erstelle die Antwort
      const response: AnalyzeResponse = {
        ok: true,
        summary: summary,
        cached: false
      };
      
      // Speichere die Antwort im Filesystem-Cache
      await saveToCache(normalizedPgn, {
        timestamp: Date.now(),
        response: response
      });
      
      // Logging
      console.log(`Saved analysis to filesystem cache`);
      
      return c.json(response);
    } catch (anthropicError) {
      console.error('Anthropic API error:', anthropicError);
      return c.json({
        ok: false, 
        error: 'Error analyzing game with Anthropic API',
        details: anthropicError instanceof Error ? anthropicError.message : 'Unknown error'
      }, 500);
    }
  } catch (error) {
    console.error('Error processing request:', error);
    return c.json({ ok: false, error: 'Invalid request' }, 400);
  }
});

// Start the server
const port = parseInt(env.PORT || '3001');
console.log(`Server is running on port ${port}`);

export default {
  port,
  fetch: app.fetch
};
